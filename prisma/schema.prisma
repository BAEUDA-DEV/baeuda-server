generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProviderType {
  GOOGLE
}

model Auth {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  provider   ProviderType @default(GOOGLE)
  providerId String       @unique @map("provider_id")
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @unique @map("user_id")

  @@index([providerId])
  @@map("auth")
}

model User {
  id                String              @id @default(uuid())
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  name              String
  email             String              @unique
  profileImageUrl   String?             @map("profile_image_url")
  Auth              Auth?
  UserCertification UserCertification[]
  Comment           Comment[]

  @@map("user")
}

model Certification {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  code               String               @unique
  name               String               @unique
  CertificationRound CertificationRound[]
  quiz               Quiz[]

  @@index([code])
  @@map("certification")
}

model UserCertification {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String             @map("user_id")
  certificationRound   CertificationRound @relation(fields: [certificationRoundId], references: [id], onDelete: Cascade)
  certificationRoundId String             @map("certification_round_id")

  @@map("user_certification")
}

model CertificationRound {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  certification      Certification       @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  certificationId    String              @map("certification_id")
  year               Int
  step               Int
  registrationStart  DateTime            @map("registrantion_start")
  registrationEnd    DateTime            @map("registration_end")
  testStart          DateTime            @map("test_start")
  testEnd            DateTime            @map("test_end")
  resultAnnouncement DateTime            @map("result_announcement")
  UserCertification  UserCertification[]

  @@map("certification_round")
}

model Quiz {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  certificationId String        @map("certification_id")
  question        String
  answers         Answer[]

  @@map("quiz")
}

model Answer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String   @map("quid_id")

  @@map("answer")
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  writer    User     @relation(fields: [writerId], references: [id], onDelete: Cascade)
  writerId  String
  content   String

  @@map("comment")
}
